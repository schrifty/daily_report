#!/Users/mschriftman/.rbenv/versions/2.1.1/bin/ruby
$LOAD_PATH << './lib'

require 'rubygems'
require 'csv'
require 'fileutils'
require 'jira'
require 'paint'

TODAY = (Date.today - Date.new(1970, 1, 1)).to_i
DEFAULT_STORY_POINTS = 8
DEFAULT_TASK_HOURS = 2
DEFAULT_AGGREGATE_HOURS = 9

def get_jira_client
	JIRA::Client.new(options = {
    	:username => "mschriftman",
    	:password => "l1bertyJ",
    	:site     => 'https://jira.spredfast.com/',
    	:context_path => '',
    	:auth_type => :basic,
    	:max_results => 99
 	})
end

STATS = {}
FIELD_MAP = {}
FIELD_MAP[:original] = {:dt => 0, :total => 1, :open => 2, :in_progress => 3, :in_development => 4, :in_testing => 5, :closed => 6, :history => 7, :previous => 8}
FIELD_MAP[:remaining] = {:dt => 0, :total => 1, :open => 2, :in_progress => 3, :in_development => 4, :in_testing => 5, :closed => 6, :history => 7, :previous => 8}
FIELD_MAP[:timespent] = {:dt => 0, :total => 1, :open => 2, :in_progress => 3, :in_development => 4, :in_testing => 5, :closed => 6, :history => 7, :previous => 8}
FIELD_MAP[:tasks] = {:dt => 0, :total => 1, :open => 2, :in_progress => 3, :in_development => 4, :in_testing => 5, :closed => 6, :history => 7, :previous => 8}
FIELD_MAP[:stories] = {:dt => 0, :total => 1, :open => 2, :in_progress => 3, :in_development => 4, :in_testing => 5, :closed => 6, :history => 7, :previous => 8}
FIELD_MAP[:storyids] = {:dt => 0, :total => 1, :open => 2, :in_progress => 3, :in_development => 4, :in_testing => 5, :closed => 6, :history => 7, :previous => 8}
FIELD_MAP[:taskids] = {:dt => 0, :total => 1, :open => 2, :in_progress => 3, :in_development => 4, :in_testing => 5, :closed => 6, :history => 7, :previous => 8}
FIELD_MAP[:storypoints] = {:dt => 0, :total => 1, :open => 2, :in_progress => 3, :in_development => 4, :in_testing => 5, :closed => 6, :history => 7, :previous => 8}
FIELD_MAP[:metrics] = {:dt => 0, :days5 => 1, :spd5 => 2, :ppd5 => 3, :tpd5 => 4, :days6 => 5, :spd6 => 6, :ppd6 => 7, :tpd6 => 8, :sppd5 => 9, :sppd6 => 10, :history => 11, :previous => 12 }
FIELD_MAP[:bugids] = {:dt => 0, :total => 1, :open => 2, :in_progress => 3, :in_development => 4, :in_testing => 5, :closed => 6, :resolved => 7, :history => 8, :previous => 9}
def get(table, key)
	STATS[table] ||= []
	if key
		STATS[table][FIELD_MAP[table][key]]
	else
		STATS[table]
	end
end
def set(table, key, value) STATS[table] ||= []; STATS[table][FIELD_MAP[table][key]] = value; end
def inc(table, key, value) STATS[table] ||= []; STATS[table][FIELD_MAP[table][key]] ||= 0; STATS[table][FIELD_MAP[table][key]] += value; end
def cat(table, key, value) STATS[table] ||= []; STATS[table][FIELD_MAP[table][key]] ||= ""; STATS[table][FIELD_MAP[table][key]] += ((STATS[table][FIELD_MAP[table][key]].empty? ? "" : "/") + value); end
def pp() puts STATS.inspect; end

FIELD_MAP.keys.each do |table|
  self.class.class_eval do
    define_method "get_#{table}" do |key| get(table, key); end
    define_method "set_#{table}" do |key, value| set(table, key, value); end
    define_method "inc_#{table}" do |key, value| inc(table, key, value); end
    define_method "cat_#{table}" do |key, value| cat(table, key, value); end
  end
end

def load_historical_data
	# load historical data
	previous_exists = true
	(FIELD_MAP.keys - [:remaining]).each{|stat|
		table_exists = load_table(stat)
		previous_exists &&= table_exists
	}
	previous_exists
end

def load_table(table)
	filename = "data/hist_#{table}.csv"
	set(table, :history, [])
	set(table, :previous, {})
	begin
		rows = CSV.read(filename)
		set(table, :history, rows)
		if most_recent = rows.max_by {|row| row[0]}
			set(table, :previous, most_recent)
			return true
		end
	rescue
		FileUtils.touch(filename)
	end
	return false
end

def save_historical_data
	(FIELD_MAP.keys - [:remaining, :metrics]).each { |table|
		CSV.open("data/hist_#{table}.csv", "wb") { |csv|
			get(table, :history).each{|day|
	    		csv << day if day[0].to_i < TODAY
	    	}
	    	csv << [TODAY, get(table, :total), get(table, :open), get(table, :in_progress), get(table, :in_development), get(table, :in_testing), get(table, :closed)]
		}
	}

	CSV.open("data/hist_metrics.csv", "wb") { |csv|
		get_metrics(:history).each{|day|
			csv << day if day[0].to_i < TODAY
		}
		csv << [TODAY, get_metrics(:days5), get_metrics(:spd5), get_metrics(:ppd5), get_metrics(:tpd5), get_metrics(:days6), get_metrics(:spd6), get_metrics(:ppd6), get_metrics(:tpd6), get_metrics(:sppd5), get_metrics(:sppd6)]
	}
end

DEV_HASH= {}
def load_issue_data
	issues = get_jira_client.Issue.jql('project = Development AND ((issuetype in ("Story Bug", "Technical task") AND fixVersion = "UX 7.0 - Q1 Milestone") OR (issuetype = Story AND "Epic Link" in (DEV-32341, DEV-32773, DEV-33457, DEV-33458, DEV-34044)))', 0, 2000)
	missing_estimates = missing_sizings = missing_taskings = 0
	issues.each do |issue|
    	next unless issue_status = issue.status.name
    	next unless issue.key =~ /DEV-/

	    issue_status = issue_status.downcase.gsub(" ", "_").to_sym
		assignee = issue.assignee ? issue.assignee.displayName : "Unknown"
		DEV_HASH[assignee] ||= {:stories => 0, :tasks => 0, :original => 0, :timespent => 0, :bugs => 0}

    	case issue.issuetype.name.downcase
    	when 'technical task'
	    	issue_status = :in_progress if [:information_needed, :in_code_read, :resolved].include? issue_status
	    	issue_status = :open if [:reopened].include? issue_status

			# puts "WARNING: #{issue.key} task estimated at zero" if issue_status ==:open && ! issue.timeoriginalestimate

	    	# default timespent to 100% accuracy if it's not provided
	    	# issue.timeestimate => remaining
	    	# issue.timeoriginalestimate => original
	    	# issue.timespent -> timespent
    		val = issue.timeestimate.to_i
    		inc(:remaining, issue_status, val)
    		inc(:remaining, :total, val)

    		# if a task isn't estimated and it's still open, use the average task value of 2 hours
    		val = issue.timeoriginalestimate.to_i
    		if issue_status == :open && val == 0
    			missing_estimates += 1
    			val = DEFAULT_TASK_HOURS * 3600
    		end
    		inc(:original, issue_status, val)
    		inc(:original, :total, val)

    		# default timespent to the original estimate if it has not been provided
    		val = (issue.timespent || val.to_s).to_i
    		inc(:timespent, issue_status, val)
    		inc(:timespent, :total, val)

			inc_tasks(issue_status, 1)
			inc_tasks(:total, 1)

			cat_taskids(issue_status, issue.key)

			# assignee stats
			if issue_status == :closed
				DEV_HASH[assignee][:tasks] += 1
				DEV_HASH[assignee][:original] += issue.timeoriginalestimate.to_i
				DEV_HASH[assignee][:timespent] += (issue.timespent || issue.timeoriginalestimate).to_i
			end
		when 'story'
			# puts "WARNING: #{issue.key} has no story points" if issue_status == :open && ! issue.customfield_10003
			if issue_status == :open
				if ! issue.aggregatetimeoriginalestimate || issue.aggregatetimeoriginalestimate == 0
					puts "WARNING: #{issue.key} missing tasking" 
					missing_taskings += 1
					val = (3600 * DEFAULT_AGGREGATE_HOURS)
					inc(:original, issue_status, val)
					inc(:original, :total, val)
					inc(:remaining, issue_status, val)
					inc(:remaining, :total, val)
				end
			end

			inc_stories(issue_status, 1)
			inc_stories(:total, 1)

			cat_storyids(issue_status, issue.key)

    		val = issue.customfield_10003
    		if issue_status == :open && ! val
    			missing_sizings += 1
    			val = DEFAULT_STORY_POINTS
    		end
			inc_storypoints(issue_status, val || 0)
			inc_storypoints(:total, val || 0)

			if issue_status == :closed
				DEV_HASH[assignee][:stories] += 1
			end
		when 'story bug'
	    	if ['blocker', 'critical'].include? issue.priority.name.downcase
		    	issue_status = :in_progress if [:information_needed, :in_code_read, :resolved].include? issue_status
		    	issue_status = :open if [:reopened].include? issue_status
				cat_bugids(issue_status, issue.key)
			end

			DEV_HASH[assignee][:bugs] += 1
		end
	end

	puts "WARNING: Default estimate value (#{DEFAULT_TASK_HOURS} hours) used for #{missing_estimates} unestimated tasks" if missing_estimates > 0
	puts "WARNING: Default story point value (#{DEFAULT_STORY_POINTS} points) used for #{missing_sizings} unsized stories" if missing_sizings > 0
	puts "WARNING: Default total aggregate tasking value (#{DEFAULT_AGGREGATE_HOURS} hours) used for #{missing_taskings} untasked stories" if missing_taskings > 0

	process_issue_data
end

def process_issue_data
	days = ((Date.today + 1)..Date.new(2014, 5, 23))
	set_metrics(:days5, days5 = days.select {|d| (1..5).include?(d.wday) }.size)
	set_metrics(:days6, days6 = days.select {|d| (1..6).include?(d.wday) }.size)

	set_metrics(:ppd5, ((get_remaining(:total) - get_remaining(:closed)).to_f / (3600 * days5)).round(2))
	set_metrics(:tpd5, ((get_tasks(:total) - get_tasks(:closed)).to_f / days5).round(2))
	set_metrics(:spd5, (((get_stories(:total) || 0) - (get_stories(:closed) || 0)).to_f / days5).round(2))
	set_metrics(:sppd5, (((get_storypoints(:total) || 0) - (get_storypoints(:closed) || 0)).to_f / days5).round(2) )
	set_metrics(:ppd6, ((get_remaining(:total) - get_remaining(:closed)).to_f / (3600 * days6)).round(2))
	set_metrics(:tpd6, ((get_tasks(:total) - get_tasks(:closed)).to_f / days6).round(2))
	set_metrics(:spd6, (((get_stories(:total) || 0) - (get_stories(:closed) || 0)).to_f / days6).round(2))
	set_metrics(:sppd6, (((get_storypoints(:total) || 0) - (get_storypoints(:closed) || 0)).to_f / days6).round(2) )
end	

def paint_number(n, colorize = false, reverse = false)
	if n < 0
    	str = "-#{n.abs}"
    	color = reverse ? :green : :red
    elsif n > 0
    	str = "+#{n.abs}"
    	color = reverse ? :red : :green
    else
    	str = "#{n.abs}"
    	color = :black
    end
    color = :black unless colorize
    " [#{Paint[str, color]}]"
end

def metrics_previous(current, index, colorize = false)
  	if prev_metrics = get_metrics(:previous)
  		if val = prev_metrics[index].to_f
	  		n = (current - val).round(2)
	  		return paint_number(n, colorize, true)
    	end
  	end
  	return ""
end

def daily_report(previous_exists)
	delta_label = {:points => {}, :tasks => {}, :stories => {}, :storypoints => {}, :bugs => {}}
	[:open, :in_progress, :closed, :total, :in_development, :in_testing].each{ |status|
		delta_label[:points][status] = ""
		delta_label[:bugs][status] = ""
		if previous_exists
			delta = ((( get_original(status).to_f || 0 ) - ( get_original(:previous)[FIELD_MAP[:original][status]].to_f || 0 )) / 3600).round(2)
			delta_label[:points][status] = paint_number(delta, (status == :closed))
			delta = (get_bugids(status) || "").split("/").size - (get_bugids(:previous)[FIELD_MAP[:bugids][status]] || "").split("/").size
			delta_label[:bugs][status] = paint_number(delta, true, (status != :closed))
		end
		[:tasks, :stories, :storypoints].each { |table|
			delta_label[table][status] = ""
			if previous_exists
				delta = (get(table, status).to_f || 0) - (get(table, :previous)[FIELD_MAP[table][status]].to_f || 0)
				delta_label[table][status] = paint_number(delta, (status == :closed))
			end
		}
	}
	deltas = {}
	[:stories, :storypoints, :tasks, :original].each {|table|
		deltas[table] = (get(table, :closed).to_i || 0) - (get(table, :previous)[FIELD_MAP[table][:closed]].to_i || 0)
	}
	deltas[:original] = (deltas[:original].to_f / 3600).round(2)

	# build lists of stories that have entered a new state, grouped by state
	story_lists = {}
	task_lists = {}
	bug_lists = {}
	[:open, :in_development, :in_progress, :in_testing, :closed].each{|status|
		if get_bugids(status) && get_bugids(:previous)[FIELD_MAP[:bugids][status]]
			bug_lists[status] = get_bugids(status).split("/") - get_bugids(:previous)[FIELD_MAP[:bugids][status]].split("/")
		end
		if get_storyids(status) && get_storyids(:previous)[FIELD_MAP[:storyids][status]]
			story_lists[status] = get_storyids(status).split("/") - get_storyids(:previous)[FIELD_MAP[:storyids][status]].split("/")
		end
		if get_taskids(status) && get_taskids(:previous)[FIELD_MAP[:taskids][status]]
			task_lists[status] = get_taskids(status).split("/") - get_taskids(:previous)[FIELD_MAP[:taskids][status]].split("/")
		end
	}
	all_stories = (story_lists.values + task_lists.values + bug_lists.values).inject([]) {|all, list| all + list}
	if all_stories.size > 0
		issues = get_jira_client.Issue.jql("key in (#{all_stories.join(',')})", 0, 2000)
		[story_lists, task_lists, bug_lists].each {|list|
			list.keys.each{|status|
				list[status] = list[status].collect {|key|
					issue = issues.detect{|issue| issue.key == key}
					puts "WARNING: Couldn't find #{key} to get summary of issue referenced in report" unless issue
					size = case issue.issuetype.name.downcase
					when 'story'
						"(#{issue.customfield_10003} points)"
					when 'technical task'
						"(#{(issue.timeoriginalestimate .to_f/ 3600.0).round(0)} hours)"
					else
						""
					end
					"#{key} - #{issue ? issue.summary : 'Unknown'} (#{issue ? issue.assignee && issue.assignee.displayName : ''}) #{size}"
				}
			}
		}
	end
	
	puts "\nStory Count [day-over-day delta]:"
	puts "  Total: #{get_stories(:total)}#{delta_label[:stories][:total]}"
	puts "  Open: #{get_stories(:open)}#{delta_label[:stories][:open]}"
	story_lists[:open].each {|issue_key| puts "    #{issue_key}" } if story_lists[:open]
	puts "  In Development: #{get_stories(:in_development)}#{delta_label[:stories][:in_development]}"
	story_lists[:in_development].each {|issue_key| puts "    #{issue_key}" } if story_lists[:in_development]
	puts "  In Testing: #{get_stories(:in_testing)}#{delta_label[:stories][:in_testing]}"
	story_lists[:in_testing].each {|issue_key| puts "    #{issue_key}" } if story_lists[:in_testing]
	puts "  Closed: #{get_stories(:closed)}#{delta_label[:stories][:closed]}"
	story_lists[:closed].each {|issue_key| puts "    #{issue_key}" } if story_lists[:closed]
	puts "\nStory Points [day-over-day delta]:"
	puts "  Total: #{get_storypoints(:total)}#{delta_label[:storypoints][:total]}"
	puts "  Open: #{get_storypoints(:open)}#{delta_label[:storypoints][:open]}"
	puts "  In Development: #{get_storypoints(:in_development)}#{delta_label[:storypoints][:in_development]}"
	puts "  In Testing: #{get_storypoints(:in_testing)}#{delta_label[:storypoints][:in_testing]}"
	puts "  Closed: #{get_storypoints(:closed)}#{delta_label[:storypoints][:closed]}"

	puts "\nTask Count [day-over-day delta]:"
	puts "  Total: #{get_tasks(:total)}#{delta_label[:tasks][:total]}"
	puts "  Open: #{get_tasks(:open)}#{delta_label[:tasks][:open]}"
	task_lists[:open].each {|issue_key| puts "    #{issue_key}" } if task_lists[:open]
	puts "  In Progress: #{get_tasks(:in_progress)}#{delta_label[:tasks][:in_progress]}"
	task_lists[:in_progress].each {|issue_key| puts "    #{issue_key}" } if task_lists[:in_progress]
	puts "  Closed: #{get_tasks(:closed)}#{delta_label[:tasks][:closed]}"
	task_lists[:closed].each {|issue_key| puts "    #{issue_key}" } if task_lists[:closed]

	puts "\nTask Hours [day-over-day delta]:"
	puts "  Total: #{get_remaining(:total) / 3600} of #{get_original(:total) / 3600} remaining#{delta_label[:points][:total]}"
	puts "  Open: #{get_remaining(:open) / 3600}#{delta_label[:points][:open]}"
	puts "  In Progress: #{get_remaining(:in_progress) / 3600} of #{get_original(:in_progress) / 3600} remaining#{delta_label[:points][:in_progress]}"
	puts "  Closed: #{get_original(:closed) / 3600}#{delta_label[:points][:closed]}"

	puts "\nCritical/Blocker Defects:"
	puts "  Open: #{get_bugids(:open).split('/').size}#{delta_label[:bugs][:open]}"
	bug_lists[:open].each {|issue_key| puts "    #{issue_key}" } if bug_lists[:open]
	puts "  In Progress: #{get_bugids(:in_progress).split('/').size}#{delta_label[:bugs][:in_progress]}"
	bug_lists[:in_progress].each {|issue_key| puts "    #{issue_key}" } if bug_lists[:in_progress]
	puts "  Closed: #{get_bugids(:closed).split('/').size}#{delta_label[:bugs][:closed]}"
	bug_lists[:closed].each {|issue_key| puts "    #{issue_key}" } if bug_lists[:closed]

	# puts "\nEstimate Accuracy: Actual #{get_timespent(:closed) / 3600} vs Estimated #{get_original(:closed) / 3600} task hours (defaults to 100% accuracy when tasks lack timespent data)"

	puts "\nRequired velocities assuming 5-day work week [day-over-day delta]:"
	puts "  Work Days until 5/23: #{get_metrics(:days5)}#{metrics_previous(get_metrics(:days5), 1)}"
	puts "  Stories Closed per Day to make 5/23:"
	puts "    Required: #{get_metrics(:spd5)}#{metrics_previous(get_metrics(:spd5), 2, true)} (#{get_metrics(:sppd5)}#{metrics_previous(get_metrics(:sppd5), 9, true)} points)"
	puts "    Closed since last run: #{deltas[:stories]} (#{deltas[:storypoints]} points)"
	puts "  Tasks Closed per Day to make 5/23:"
	puts "    Required: #{get_metrics(:tpd5)}#{metrics_previous(get_metrics(:tpd5), 4, true)}"
	puts "    Closed since last run: #{deltas[:tasks]}"
	puts "  Task Hours per Day to make 5/23:"
	puts "    Required: #{get_metrics(:ppd5)}#{metrics_previous(get_metrics(:ppd5), 3, true	)}"
	puts "    Closed since last run: #{deltas[:original]}"

	puts "\nRequired velocities assuming 6-day work week [day-over-day delta]:"
	puts "  Work Days until 5/23: #{get_metrics(:days6)}#{metrics_previous(get_metrics(:days6), 5)}"
	puts "  Stories Closed per Day to make 5/23:"
	puts "    Required: #{get_metrics(:spd6)}#{metrics_previous(get_metrics(:spd6), 6, true)} (#{get_metrics(:sppd6)}#{metrics_previous(get_metrics(:sppd6), 10, true)} points)"
	puts "    Closed since last run: #{deltas[:stories]} (#{deltas[:storypoints]} points)"
	puts "  Tasks Closed per Day to make 5/23:"
	puts "    Required: #{get_metrics(:tpd6)}#{metrics_previous(get_metrics(:tpd6), 8, true)}"
	puts "    Closed since last run: #{deltas[:tasks]}"
	puts "  Task Hours per Day to make 5/23:"
	puts "    Required: #{get_metrics(:ppd6)}#{metrics_previous(get_metrics(:ppd6), 7, true)}"
	puts "    Closed since last run: #{deltas[:original]}"
end

previous_exists = load_historical_data
load_issue_data
daily_report(previous_exists)
save_historical_data